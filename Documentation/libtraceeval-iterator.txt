libtraceeval(3)
===============

NAME
----
traceeval_iterator_get, traceeval_iterator_put, traceeval_iterator_sort, traceeval_iterator_sort_custom,
traceeval_iterator_next, traceeval_iterator_query, traceeval_iterator_results_release, traceeval_iterator_stat,
traceeval_iterator_remove - Operations to iterate over the elements of a traceeval

SYNOPSIS
--------
[verse]
--
*#include <traceeval.h>*

struct traceeval_iterator pass:[*]*traceeval_iterator_get*(struct traceeval pass:[*]_teval_);
void *traceeval_iterator_put*(struct traceeval_iterator pass:[*]_iter_);
int *traceeval_iterator_sort*(struct traceeval_iterator pass:[*]_iter_, const char pass:[*]_sort_field_,
			    int _level_, bool _ascending_);
int *traceeval_iterator_sort_custom*(struct traceeval_iterator pass:[*]_iter_,
				   traceeval_cmp_fn _sort_fn_, void pass:[*]_data_);
int *traceeval_iterator_next*(struct traceeval_iterator pass:[*]_iter_,
			    const struct traceeval_data pass:[**]_keys_);
int *traceeval_iterator_query*(struct traceeval_iterator pass:[*]_iter_,
			     const struct traceeval_data pass:[**]_results_);
void *traceeval_iterator_results_release*(struct traceeval_iterator pass:[*]_iter_,
					const struct traceeval_data pass:[*]_results_);
struct traceeval_stat pass:[*]*traceeval_iterator_stat*(struct traceeval_iterator pass:[*]_iter_,
					       struct traceeval_type pass:[*]_type_);
int *traceeval_iterator_remove*(struct traceeval_iterator pass:[*]_iter_);
--

DESCRIPTION
-----------
The traceeval utility facilitates the collection of data as a tool iterates over
trace events. The traceeval_iterator is a means to read the data that was collected.

The *traceeval_iterator_get()* takes a _teval_ descriptor of the traceeval that is
to be extracted and returns a struct traceeval_iterator descriptor that can be
used to iterate over the events of the traceeval.

When the iterator is no longer required, *traceeval_iterator_put()* is used to
release any of the allocated memory of the _iter_ traceeval_iterator.

Before iterating, the data may be sorted using *traceeval_iterator_sort()*.
This will sort how the elements will be iterated over via the given _iter_ iterator.
The _sort_field_ is a string that matches the .name element of a struct traceeval_type 
for either keys or vals that were passed into the *traceeval_init*(3) for the given
traceeval passed to *traceeval_iterator_get()*. The _level_ is the sorting priority
of this field, where 0 is the highest priority (sort this field first), 1 is the
next priority (sort this field for elements that have matching fields of level 0),
2 is the next priority and so on. This function should be called for each level.
If a level is skipped, it may cause an error with *traceeval_iterator_next()*.

If a custom sort needs to be done (one that is not simply following the fields)
then *traceeval_iterator_sort_custom()* may be used. This takes a parameter
_sort_fn_ that is a function of type traceeval_cmp_fn to sort. The _data_ parameter
is used to pass data to the _sort_fn_.

[verse]
--
typedef  int (*traceeval_cmp_fn)(struct traceeval *teval,
				const struct traceeval_data *Akeys,
				const struct traceeval_data *Avals,
				const struct traceeval_data *Bkeys,
				const struct traceeval_data *Bvals,
				void *data);
--

The compare function passed to *traceeval_iterator_sort_custom()* takes a _teval_ that
holds the traceeval passed to *traceeval_iterator_get()*. Then the _Akeys_ and _Avals_ of one element
and the _Bkeys_ and _Bvals_ of another element to use for comapring the two. The _data_ is a pointer
to the data that was passed into *traceeval_iterator_sort_custom()*. This function should return
less than zero if Akeys and Avals is less than Bkeys and Bvals, 0 if they are equal, and greater than zero
if greater than.

The *traceeval_iterator_next()* is used to do the iteration over the traceeval passed
to *traceeval_iterator_get()* in the sorted order defined with *traceeval_iterator_sort()*.
If the _iter_ was not sorted, the order will be somewhat random, but all the elements
will still be convered just once. For each iteration, _keys_ will be assigned the
struct traceeval_data keys of the next element. If an element is found, this will return
1.

Inside the *traceeval_iterator_next()* loop, the values of the element returned by
the keys can be quickly retrieved with *traceeval_iterator_query()*. This will
place the values in _results_, which when finished with should call *traceeval_iterator_results_release()*
on.


The *traceeval_iterator_stat()* will quickly return the stats of one of the current
element's fields (if it as desginated as a stat field). See *traceeval_stat*(3).

The *traceeval_iterator_remove()* is a safe way to remove an element from the traceeval
that was passed to *traceeval_iterator_get()*. It will remove the current element
returned by *traceeveal_iterator_next()* from the traceeval of _iter_.

RETURN VALUE
------------
The *traceeval_iterator_get()* returns a traceeval_iterator descriptor that will iterate
over the given _teval_ on success, and NULL on error.

The *traceeval_iterator_sort()* and traceeval_iterator_sort_custom()* return 0 on success and -1 or error.

The *traceeval_iterator_next()* returns 1 when it reads a new element from the traceeval and places the element's
keys into _keys_. It returns 0 when there's no more elements to read and -1 on error.

The *traceeval_iterator_query()* returns 1 if it successfully reads the current element from the
*traceeval_iterator_next()* and places the values in _results_. It returns 0 if there are no more elements,
and -1 on error.

The *traceeval_iterator_stat()* returns a descriptor for the current element's given _field_ on success and
NULL if there are no current elements or the _field_ is not a valid stat type.

The *traceeval_iterator_remove()* returns 1 if the current element was successfully removed, or 0
if there was no element (called before *traceeval_iterator_next()*).

EXAMPLE
-------
This example takes a trace.dat file created by *trace-cmd*(1) with the following command:

[verse]
--
	trace-cmd record -e sched_switch
--

And will report the times that all the tasks were preempted, running, sleeping or blocked and
break it up between tasks with the same name. It also shows how long the CPUs were running
and idle.

[source,c]
--
#include <trace-cmd.h>
#include <traceeval.h>

enum sched_state {
	RUNNING,
	BLOCKED,
	PREEMPT,
	SLEEP,
	IDLE,
	OTHER
};

static struct traceeval_type cpu_keys[] = {
	{
		.type = TRACEEVAL_TYPE_NUMBER,
		.name = "CPU",
	},
	{
		.type = TRACEEVAL_TYPE_NUMBER,
		.name = "Schedule state",
	},
};

static void add_cpu_data(struct traceeval *teval, int cpu, int state,
			 unsigned long long delta, unsigned long long ts)
{
	struct traceeval_data keys[2];
	struct traceeval_data vals[1];

	TRACEEVAL_SET_NUMBER(keys[0], cpu);
	TRACEEVAL_SET_NUMBER(keys[1], state);

	TRACEEVAL_SET_DELTA(vals[0], delta, ts);

	traceeval_insert(teval, keys, vals);
}

static struct traceeval_type cpu_delta_keys[] = {
	{
		.type = TRACEEVAL_TYPE_NUMBER,
		.name = "CPU",
	},
};

static void start_cpu_data(struct traceeval *teval, int cpu, unsigned long long ts)
{
	struct traceeval_data keys[1];

	TRACEEVAL_SET_NUMBER(keys[0], cpu);

	traceeval_delta_start(teval, keys, NULL, ts);
}

static void continue_cpu_data(struct traceeval *teval, int cpu, unsigned long long ts)
{
	struct traceeval_data keys[1];

	TRACEEVAL_SET_NUMBER(keys[0], cpu);

	traceeval_delta_continue(teval, keys, NULL, ts);
}

static int stop_cpu_data(struct traceeval *teval, int cpu, unsigned long long ts,
			 unsigned long long *delta)
{
	struct traceeval_data keys[1];

	TRACEEVAL_SET_NUMBER(keys[0], cpu);

	return traceeval_delta_stop(teval, keys, NULL, ts, delta, NULL);
}

static struct traceeval_type task_keys[] = {
	{
		.type = TRACEEVAL_TYPE_STRING,
		.name = "COMM"
	},
	{
		.type = TRACEEVAL_TYPE_NUMBER,
		.name = "Schedule state"
	},
};

static void release_pdata(const struct traceeval_type *type,
			  struct traceeval_data *data);

static int copy_pdata(const struct traceeval_type *type,
		     struct traceeval_data *dst,
		     const struct traceeval_data *src)
{
	/* This prevents the release function getting called */
	*dst = *src;
	return 0;
}

static struct traceeval_type task_vals[] = {
	{
		.type = TRACEEVAL_TYPE_POINTER,
		.name = "data",
		.copy = copy_pdata,
		.release = release_pdata,
	},
	{
		.type = TRACEEVAL_TYPE_DELTA,
		.name = "delta",
	},
};

static void add_task_data(struct traceeval *teval, const char *comm,
			  int state, void *pdata,
			  unsigned long long delta, unsigned long long ts)
{
	struct traceeval_data keys[2];
	struct traceeval_data vals[2];

	TRACEEVAL_SET_CSTRING(keys[0], comm);
	TRACEEVAL_SET_NUMBER(keys[1], state);

	/* Only save pdata for the running event (no duplicates) */
	if (state != RUNNING)
		pdata = NULL;

	TRACEEVAL_SET_POINTER(vals[0], pdata);
	TRACEEVAL_SET_DELTA(vals[1], delta, ts);

	traceeval_insert(teval, keys, vals);
}

static struct traceeval_type task_delta_keys[] = {
	{
		.type = TRACEEVAL_TYPE_NUMBER,
		.name = "PID"
	},
};

static struct traceeval_type task_delta_vals[] = {
	{
		.type = TRACEEVAL_TYPE_NUMBER,
		.name = "Schedule state"
	},
};

static void start_task_data(struct traceeval *teval, int pid,
			    int state, unsigned long long ts)
{
	struct traceeval_data keys[1];
	struct traceeval_data vals[1];

	TRACEEVAL_SET_NUMBER(keys[0], pid);

	TRACEEVAL_SET_NUMBER(vals[0], state);

	traceeval_delta_start(teval, keys, vals, ts);
}

static int stop_task_data(struct traceeval *teval, int pid, unsigned long long ts,
			 unsigned long long *delta, int *state)
{
	struct traceeval_data keys[1];
	const struct traceeval_data *results;
	int ret;

	TRACEEVAL_SET_NUMBER(keys[0], pid);

	ret = traceeval_delta_stop(teval, keys, &results, ts, delta, NULL);
	if (ret < 1)
		return ret;

	if (state)
		*state = results[0].number;

	traceeval_results_release(teval, results);

	return ret;
}

static struct traceeval_type thread_keys[] = {
	{
		.type = TRACEEVAL_TYPE_NUMBER,
		.name = "TID",
	},
	{
		.type = TRACEEVAL_TYPE_NUMBER,
		.name = "Schedule state",
	},
};

static struct traceeval_type delta_vals[] = {
	{
		.type	= TRACEEVAL_TYPE_DELTA,
		.name	= "delta",
	},
};

static void add_thread_data(struct traceeval *teval, int pid, int state,
			    unsigned long long delta, unsigned long long ts)
{
	struct traceeval_data keys[2];
	struct traceeval_data vals[1];

	TRACEEVAL_SET_NUMBER(keys[0], pid);
	TRACEEVAL_SET_NUMBER(keys[1], state);

	TRACEEVAL_SET_DELTA(vals[0], delta, ts);

	traceeval_insert(teval, keys, vals);
}

struct process_data {
	struct traceeval	*teval_cpus;
	struct traceeval	*teval_threads;
};

struct task_data {
	struct traceeval	*teval_cpus;
	struct traceeval	*teval_tasks;
	const char		*comm;
};

static void init_process_data(struct process_data *pdata)
{

	pdata->teval_cpus = traceeval_init(cpu_keys, delta_vals);
	traceeval_delta_create(pdata->teval_cpus, cpu_delta_keys, NULL);

	pdata->teval_threads = traceeval_init(thread_keys, delta_vals);
}

static struct process_data *alloc_pdata(struct task_data *tdata, const char *comm)
{
	struct process_data *pdata;

	pdata = calloc(1, sizeof(*pdata));
	init_process_data(pdata);
	add_task_data(tdata->teval_tasks, comm, RUNNING, pdata, 0, 0);

	return pdata;
}

static struct process_data *
get_process_data(struct task_data *tdata, const char *comm)
{
	struct traceeval_data keys[] = {
		DEFINE_TRACEEVAL_CSTRING(	comm	),
		DEFINE_TRACEEVAL_NUMBER(	RUNNING	),
	};
	const struct traceeval_data *results;
	void *data;
	int ret;

	ret = traceeval_query(tdata->teval_tasks, keys, &results);
	if (ret == 0)
		return alloc_pdata(tdata, comm);

	data = results[0].pointer;
	traceeval_results_release(tdata->teval_tasks, results);
	return data;
}

static enum sched_state get_state(unsigned long long val)
{
	if (val & 1)
		return SLEEP;
	if (val & 2)
		return BLOCKED;
	if (val & 0xfff)
		return OTHER;
	return PREEMPT;
}

static void sched_out(struct task_data *tdata, const char *comm,
		      struct tep_event *event,
		      struct tep_record *record, struct tep_format_field *prev_pid,
		      struct tep_format_field *prev_state)
{
	struct process_data *pdata;
	unsigned long long delta;
	unsigned long long val;
	int state;
	int pid;
	int ret;

	tep_read_number_field(prev_pid, record->data, &val);

	/* Ignore the idle task */
	pid = val;
	if (!pid) {
		/* Coming from idle */
		ret = stop_cpu_data(tdata->teval_cpus, record->cpu, record->ts, &delta);
		if (ret > 0)
			add_cpu_data(tdata->teval_cpus, record->cpu, IDLE, delta,
				     record->ts);
		return;
	}

	/* Get the process data for this task */
	pdata = get_process_data(tdata, comm);

	ret = stop_task_data(tdata->teval_tasks, pid, record->ts, &delta, NULL);

	if (ret > 0) {
		/* Record the running state */
		add_task_data(tdata->teval_tasks, comm, RUNNING, pdata, delta, record->ts);
		add_thread_data(pdata->teval_threads, pid, RUNNING, delta, record->ts);
	}

	tep_read_number_field(prev_state, record->data, &val);
	state = get_state(val);

	/* Start the off-cpu time and record the state */
	start_task_data(tdata->teval_tasks, pid, state, record->ts);
}

static void sched_in(struct task_data *tdata, const char *comm,
		     struct tep_event *event,
		     struct tep_record *record, struct tep_format_field *next_pid)
{
	struct process_data *pdata;
	unsigned long long delta;
	unsigned long long val;
	int state;
	int pid;
	int ret;

	tep_read_number_field(next_pid, record->data, &val);
	pid = val;

	/* Ignore the idle task */
	if (!pid) {

		/* Going to idle, get the time the CPU was running */
		ret = stop_cpu_data(tdata->teval_cpus, record->cpu, record->ts, &delta);
		if (ret > 0)
			add_cpu_data(tdata->teval_cpus, record->cpu, RUNNING,
				     delta, record->ts);

		/* Start recording the time the CPU is idle */
		start_cpu_data(tdata->teval_cpus, record->cpu, record->ts);
		return;
	}

	/* Continue the CPU as running */
	continue_cpu_data(tdata->teval_cpus, record->cpu, record->ts);

	pdata = get_process_data(tdata, comm);

	/* Record the time the task was off the CPU and why */
	ret = stop_task_data(tdata->teval_tasks, pid, record->ts, &delta, &state);

	if (ret > 0) {
		add_task_data(tdata->teval_tasks, comm, state, pdata, delta, record->ts);
		add_thread_data(pdata->teval_threads, pid, state, delta, record->ts);
	}

	/* Start recording the running of this task */
	start_task_data(tdata->teval_tasks, pid, RUNNING, record->ts);
}

static struct tep_format_field *get_field(struct tep_event *event, const char *name)
{
	static struct tep_format_field *field;

	field = tep_find_field(event, name);
	if (!field) {
		fprintf(stderr, "Could not find field %s for %s",
			name, event->name);
		exit(-1);
	}

	return field;
}

static int switch_func(struct tracecmd_input *handle, struct tep_event *event,
		       struct tep_record *record, int cpu, void *data)
{
	static struct tep_format_field *prev_comm;
	static struct tep_format_field *prev_pid;
	static struct tep_format_field *prev_state;
	static struct tep_format_field *next_comm;
	static struct tep_format_field *next_pid;
	struct task_data *tdata = data;
	const char *comm;

	if (!next_comm) {
		prev_comm = get_field(event, "prev_comm");
		prev_pid = get_field(event, "prev_pid");
		prev_state = get_field(event, "prev_state");

		next_comm = get_field(event, "next_comm");
		next_pid = get_field(event, "next_pid");
	}

	comm = record->data + prev_comm->offset;
	if (!tdata->comm || strcmp(comm, tdata->comm) == 0)
		sched_out(tdata, comm, event, record, prev_pid, prev_state);

	comm = record->data + next_comm->offset;
	if (!tdata->comm || strcmp(comm, tdata->comm) == 0)
		sched_in(tdata, comm, event, record, next_pid);

	return 0;
}

static void print_microseconds(int idx, unsigned long long nsecs)
{
	unsigned long long usecs;

	usecs = nsecs / 1000;
	if (!nsecs || usecs)
		printf("%*lld\n", idx, usecs);
	else
		printf("%*d.%03lld\n", idx, 0, nsecs);
}

/*
 * Sort all the processes by the RUNNING state.
 *  If A and B have the same COMM, then sort by state.
 *  else
 *    Find the RUNNNIG state for A and B
 *    If the RUNNING state does not exist, it's considered -1
 *  If RUNNING is equal, then sort by COMM.
 */
static int compare_pdata(struct traceeval *teval_data,
				const struct traceeval_data *Akeys,
				const struct traceeval_data *Avals,
				const struct traceeval_data *Bkeys,
				const struct traceeval_data *Bvals,
				void *data)
{
	struct traceeval *teval = data; /* The deltas are here */
	struct traceeval_data keysA[] = {
		DEFINE_TRACEEVAL_CSTRING(	Akeys[0].cstring	),
		DEFINE_TRACEEVAL_NUMBER(	RUNNING			), };
	struct traceeval_data keysB[] = {
		DEFINE_TRACEEVAL_CSTRING(	Bkeys[0].cstring	),
		DEFINE_TRACEEVAL_NUMBER(	RUNNING			), };
	struct traceeval_stat *statA;
	struct traceeval_stat *statB;
	unsigned long long totalA = -1;
	unsigned long long totalB = -1;

	/* First check if we are on the same task */
	if (strcmp(Akeys[0].cstring, Bkeys[0].cstring) == 0) {
		/* Sort decending */
		if (Bkeys[1].number > Akeys[1].number)
			return -1;
		return Bkeys[1].number != Akeys[1].number;
	}

	/* Get the RUNNING values for both processes */
	statA = traceeval_stat(teval, keysA, delta_vals[0].name);
	if (statA)
		totalA = traceeval_stat_total(statA);

	statB = traceeval_stat(teval, keysB, delta_vals[0].name);
	if (statB)
		totalB = traceeval_stat_total(statB);

	if (totalB < totalA)
		return -1;
	if (totalB > totalA)
		return 1;

	return strcmp(Bkeys[0].cstring, Akeys[0].cstring);
}

static void display_cpus(struct traceeval *teval)
{
	struct traceeval_iterator *iter = traceeval_iterator_get(teval);
	const struct traceeval_data *keys;
	struct traceeval_stat *stat;
	int last_cpu = -1;

	printf("\n");

	traceeval_iterator_sort(iter, cpu_keys[0].name, 0, true);
	traceeval_iterator_sort(iter, cpu_keys[1].name, 1, true);

	while (traceeval_iterator_next(iter, &keys) > 0) {
		int state = keys[1].number;
		int cpu = keys[0].number;

		stat = traceeval_iterator_stat(iter, delta_vals[0].name);
		if (!stat)
			continue; // die?

		if (last_cpu != cpu)
			printf("    CPU [%d]:\n", cpu);

		switch (state) {
		case RUNNING:
			printf("       Running: ");
			break;
		case IDLE:
			printf("          Idle: ");
			break;
		case BLOCKED:
		case PREEMPT:
		case SLEEP:
		case OTHER:
			printf("         \?\?(%d): ", state);
			break;
		}
		printf(" time (us):");
		print_microseconds(12, traceeval_stat_total(stat));

		last_cpu = cpu;
	}
	traceeval_iterator_put(iter);
}

static void display_state_times(int state, unsigned long long total)
{
	switch (state) {
	case RUNNING:
		printf("      Total run time (us):");
		print_microseconds(14, total);
		break;
	case BLOCKED:
		printf("      Total blocked time (us):");
		print_microseconds(10, total);
		break;
	case PREEMPT:
		printf("      Total preempt time (us):");
		print_microseconds(10, total);
		break;
	case SLEEP:
		printf("      Total sleep time (us):");
		print_microseconds(12, total);
	}
}

static void display_threads(struct traceeval *teval)
{
	struct traceeval_iterator *iter = traceeval_iterator_get(teval);
	const struct traceeval_data *keys;
	struct traceeval_stat *stat;
	int last_tid = -1;

	traceeval_iterator_sort(iter, thread_keys[0].name, 0, true);
	traceeval_iterator_sort(iter, thread_keys[1].name, 1, true);

	while (traceeval_iterator_next(iter, &keys) > 0) {
		int state = keys[1].number;
		int tid = keys[0].number;

		stat = traceeval_iterator_stat(iter, delta_vals[0].name);

		if (last_tid != keys[0].number)
			printf("\n    thread id: %d\n", tid);

		last_tid = tid;

		display_state_times(state, traceeval_stat_total(stat));
	}
	traceeval_iterator_put(iter);
}

static void display_process(struct process_data *pdata)
{
	display_threads(pdata->teval_threads);
	display_cpus(pdata->teval_cpus);
	printf("\n");
}

static void display_process_stats(struct traceeval *teval,
				  struct process_data *pdata, const char *comm)
{
	struct traceeval_stat *stat;
	unsigned long long delta;
	struct traceeval_data keys[] = {
		DEFINE_TRACEEVAL_CSTRING(	comm		),
		DEFINE_TRACEEVAL_NUMBER(	RUNNING		),
	};

	for (int i = 0; i < OTHER; i++) {
		TRACEEVAL_SET_NUMBER(keys[1], i);

		delta = 0;
		stat = traceeval_stat(teval, keys, delta_vals[0].name);
		if (stat)
			delta = traceeval_stat_total(stat);
		display_state_times(i, delta);
	}
}

static void display_processes(struct traceeval *teval)
{
	struct traceeval_iterator *iter = traceeval_iterator_get(teval);
	const struct traceeval_data *keys;

	traceeval_iterator_sort_custom(iter, compare_pdata, teval);

	while (traceeval_iterator_next(iter, &keys) > 0) {
		const struct traceeval_data *results;
		struct process_data *pdata = NULL;
		const char *comm = keys[0].cstring;

		traceeval_iterator_query(iter, &results);
		pdata = results[0].pointer;
		traceeval_results_release(teval, results);

		if (!pdata)
			continue;

		printf("Task: %s\n", comm);

		display_process_stats(teval, pdata, comm);
		if (pdata)
			display_process(pdata);
	}
	traceeval_iterator_put(iter);
}

static void display(struct task_data *tdata)
{
	struct traceeval *teval = tdata->teval_cpus;
	struct traceeval_iterator *iter = traceeval_iterator_get(teval);
	const struct traceeval_data *keys;
	struct traceeval_stat *stat;
	unsigned long long total_time = 0;
	unsigned long long idle_time = 0;

	if (tdata->comm)
		return display_processes(tdata->teval_tasks);

	printf("Total:\n");

	while (traceeval_iterator_next(iter, &keys) > 0) {
		int state = keys[1].number;

		stat = traceeval_iterator_stat(iter, delta_vals[0].name);
		if (!stat)
			continue;

		switch (state) {
		case RUNNING:
			total_time += traceeval_stat_total(stat);
			break;
		case IDLE:
			idle_time += traceeval_stat_total(stat);
			break;
		default:
			return;
		}
	}
	traceeval_iterator_put(iter);

	printf("  Total  run time (us):");
	print_microseconds(16, total_time);
	printf("  Total idle time (us):");
	print_microseconds(16, idle_time);

	display_cpus(tdata->teval_cpus);

	printf("\n");
	display_processes(tdata->teval_tasks);
}

static void release_pdata(const struct traceeval_type *type,
			  struct traceeval_data *data)
{
	struct process_data *pdata;

	if (!data || !data->pointer)
		return;

	pdata = data->pointer;
	traceeval_release(pdata->teval_cpus);
	traceeval_release(pdata->teval_threads);
	free(pdata);
}

static void free_tdata(struct task_data *tdata)
{
	traceeval_release(tdata->teval_tasks);
	traceeval_release(tdata->teval_cpus);
}

int main (int argc, char **argv)
{
	struct tracecmd_input *handle;
	struct task_data data;

	traceeval_set_log_level(TEVAL_WARN);

	memset(&data, 0, sizeof(data));

	if (argc < 2) {
		printf("Pass in trace.dat file\n");
		exit(-1);
	}

	handle = tracecmd_open(argv[1], TRACECMD_FL_LOAD_NO_PLUGINS);
	if (!handle) {
		perror(argv[1]);
		exit(-1);
	}

	data.teval_tasks = traceeval_init(task_keys, task_vals);
	traceeval_delta_create(data.teval_tasks, task_delta_keys, task_delta_vals);

	data.teval_cpus = traceeval_init(cpu_keys, delta_vals);
	traceeval_delta_create(data.teval_cpus, cpu_delta_keys, NULL);

	tracecmd_follow_event(handle, "sched", "sched_switch", switch_func, &data);

	tracecmd_iterate_events(handle, NULL, 0, NULL, NULL);

	display(&data);

	free_tdata(&data);

	return 0;
}
--

FILES
-----
[verse]
--
*traceval.h*
	Header file to include in order to have access to the library APIs.
*-ltraceeval*
	Linker switch to add when building a program that uses the library.
--

SEE ALSO
--------
*libtraceeval*(3)

AUTHOR
------
[verse]
--
*Steven Rostedt* <rostedt@goodmis.org>, author of *libtraceeval*.
--
REPORTING BUGS
--------------
Report bugs to  <linux-trace-devel@vger.kernel.org>

LICENSE
-------
libtraceeval is licensed under MIT.

